from cyclone.render import Renderer
from cyclone.texture import RenderTexture
from ._common import Vec2, CallbackData

class Window:
    def __init__(
        self,
        size: Vec2,
        window_name: str = "Cyclone Window",
        vsync: bool = False,
        high_dpi: bool = True,
    ) -> None: ...
    def get_size(self) -> tuple[int, int]: ...
    def get_framebuffer_size(self) -> tuple[int, int]: ...
    def create_renderer(self) -> Renderer: ...
    def create_render_texture(
        self, size: Vec2, resize_nearest: bool = False, high_dpi: bool = True
    ) -> RenderTexture: ...
    def should_close(self) -> bool: ...
    def set_should_close(self, value: bool) -> None: ...
    def set_title(self, title: str) -> None: ...
    def get_title(self) -> str: ...
    def get_callbacks(self) -> list[tuple[int, CallbackData]]: ...
    def closed(self) -> bool: ...
    def get_key(self, key: int) -> int: ...
    def key_pressed(self, key: int) -> bool: ...
    def key_released(self, key: int) -> bool: ...
    def get_mouse_button(self, button: int) -> int: ...
    def mouse_button_pressed(self, button: int) -> bool: ...
    def mouse_button_released(self, button: int) -> bool: ...
    def get_cursor_position(self) -> tuple[float, float]: ...
    def set_cursor_position(self, position: Vec2) -> None: ...
    def update(self) -> None: ...
    def destroy(self) -> None: ...
