from ._common import Vec2
from typing import Any
from dataclasses import dataclass

from typing import NamedTuple

class KeyCallback(NamedTuple):
    key: int
    scancode: int
    action: int
    mods: int

class MouseButtonCallback(NamedTuple):
    button: int
    action: int
    mods: int

class CursorPositionCallback(NamedTuple):
    xpos: float
    ypos: float

class WindowCloseCallback(NamedTuple):
    pass

class Window:
    def __init__(
        self,
        size: Vec2,
        window_name: str = "Cyclone Window",
        vsync: bool = False,
        high_dpi: bool = True,
    ) -> None: ...
    def set_current(self) -> None: ...
    def should_close(self) -> bool: ...
    def close(self) -> None: ...
    def get_size(self) -> tuple[int, int]: ...
    def get_framebuffer_size(self) -> tuple[int, int]: ...
    def set_title(self, title: str) -> None: ...
    def get_title(self) -> str: ...
    def get_callbacks(self) -> list[Any]: ...
    def get_key(self, key: int) -> int: ...
    def key_pressed(self, key: int) -> bool: ...
    def key_released(self, key: int) -> bool: ...
    def get_mouse_button(self, button: int) -> int: ...
    def mouse_button_pressed(self, button: int) -> bool: ...
    def mouse_button_released(self, button: int) -> bool: ...
    def get_cursor_position(self) -> tuple[float, float]: ...
    def set_cursor_position(self, position: Vec2) -> None: ...
    def update(self) -> None: ...
    def destroy(self) -> None: ...
